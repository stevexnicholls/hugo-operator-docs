// credits: https://codyhouse.co
@mixin defineColorHSL($color, $hue, $saturation, $lightness) {
  #{$color}: unquote("hsl(#{$hue}, #{$saturation}, #{$lightness})");
  #{$color}-h: #{$hue};
  #{$color}-s: #{$saturation};
  #{$color}-l: #{$lightness};
}

// return css color variable with different opacity value
// credits: https://codyhouse.co
@function alpha($color, $opacity) {
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color+'-h'});
  $color-s: var(#{$color+'-s'});
  $color-l: var(#{$color+'-l'});
  @return hsla($color-h, $color-s, $color-l, $opacity);
}

// replace substring with another string
// credits: https://codyhouse.co https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1)+$replace+str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@mixin font($font-family, $font-weight, $font-style, $font-file) {
  @font-face {
    font-family: $font-family;
    src: url($font-file+'.eot');
    src: url($font-file+'.eot?#iefix') format('embedded-opentype'),
      url($font-file+'.woff') format('woff'),
      url($font-file+'.ttf') format('truetype'),
      url($font-file+'.svg#aller') format('svg');
    font-weight: $font-weight;
    font-style: $font-style;
  }
}

@mixin fontTTF($font-family, $font-weight, $font-style, $font-file) {
  @font-face {
    font-family: $font-family;
    src: url($font-file+'.ttf') format('truetype');
    font-weight: $font-weight;
    font-style: $font-style;
  }
}